/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package www.novatec.com.ve.action;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.rpc.ServiceException;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;

import ve.com.novatec.www.novatecws.BuscarDocumentosRequest;
import ve.com.novatec.www.novatecws.BuscarDocumentosResponse;
import ve.com.novatec.www.novatecws.DpDocumentInfoDTO;
import ve.com.novatec.www.novatecws.DpServicesConnectionDTO;
import ve.com.novatec.www.novatecws.DpUserDTO;
import ve.com.novatec.www.novatecws.Indexes;
import ve.com.novatec.www.novatecws.Novatecws_ServiceLocator;
import www.novatec.com.ve.dto.BusquedaDTO;
import www.novatec.com.ve.dto.BusquedaEdcDTO;
import www.novatec.com.ve.dto.ConexionDTO;
import www.novatec.com.ve.form.BusquedaForm;
import www.novatec.com.ve.query.Consulta;
import www.novatec.com.ve.utils.Utils;
/** 
 * MyEclipse Struts
 * Creation date: 08-03-2010
 * 
 * XDoclet definition:
 * @struts.action path="/busqueda" name="busquedaForm" input="/web/busqueda.jsp" scope="request" validate="true"
 */
public class BusquedaAction extends AbstractApplicationAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	
	private final static Logger LOG_PANTALLA = 
		Logger.getLogger(BusquedaAction.class);
	
	public ActionForward executeSpecificTask(final ActionMapping mapping,final ActionForm form,
			final HttpServletRequest request, final HttpServletResponse response) {
		final BusquedaForm busquedaForm = (BusquedaForm) form;// TODO Auto-generated method stub
		/*
		 * Intancias del servicesConnection donde se especifica 
		 * el puerto y el ip de la connecion
		 */
		
		final DpServicesConnectionDTO connectionDTO = 
			new DpServicesConnectionDTO(
					ConexionDTO.getHost(
							getServlet().getInitParameter("ip docpath")), 
					ConexionDTO.getPort(
							Integer.parseInt(
									getServlet().getInitParameter("port"))));
		/*
		 * Intanciando clases para invocar el web services
		 */
		final Novatecws_ServiceLocator locator = new Novatecws_ServiceLocator();
		
		/*
		 * Usuario
		 */
		final DpUserDTO dpUserDTO =  (DpUserDTO)request.getSession().getAttribute("user");
		BuscarDocumentosResponse buscarDocResponse = null;
		DpDocumentInfoDTO documentInfoDTO;
		BusquedaEdcDTO busquedaEdcDTO = null;
		BusquedaDTO busquedaDTO;
		final Collection<BusquedaEdcDTO> busquedaEdcDTOs = 
			new ArrayList<BusquedaEdcDTO>();
		Collection<BusquedaDTO> busquedaDTOs = null;
		
		/*
		 * carga de parametros
		 * 
		 * */
		int docType = 0;
		int numeroTargeta = 0;
		int numeroAfiliado = 0;
		int numeroAutorizacion = 0;
		int trace = 0;
		int fechaTransaccion = 0;
		int montoTransaccion = 0;
		int fechaCreacionRegistro = 0;
		try {
			docType = Integer.parseInt(
					getServlet().getInitParameter("docType"));
			numeroTargeta = Integer.parseInt(
					getServlet().getInitParameter("numeroTarjeta"));
			numeroAfiliado = Integer.parseInt(
					getServlet().getInitParameter("numeroAfiliado"));
			numeroAutorizacion = Integer.parseInt(
					getServlet().getInitParameter("numeroAutorizacion"));
			trace = Integer.parseInt(
					getServlet().getInitParameter("trace"));
			fechaTransaccion = Integer.parseInt(
					getServlet().getInitParameter("fechaTransaccion"));
			montoTransaccion = Integer.parseInt(
					getServlet().getInitParameter("montoTransaccion"));
			fechaCreacionRegistro = Integer.parseInt(
					getServlet().getInitParameter("fechaCreacionRegistro"));
		} catch (Exception e) {
			// TODO: handle exception
			LOG_PANTALLA.error("Parametros de los indices invalidos");
		}
		
		Indexes[] indexes = new Indexes[7];
		indexes[0] = new Indexes(numeroTargeta, 
								www.novatec.com.ve.utils.Utils.agregarDigitos(
										busquedaForm.getNumTarjeta()));
		indexes[1] = new Indexes(
				numeroAfiliado, 
				busquedaForm.getNumAfiliado());
		indexes[2] = new Indexes(
				numeroAutorizacion, 
				busquedaForm.getNumAutorizacion());
		indexes[3] = new Indexes(trace, busquedaForm.getTrace());
		indexes[4] = new Indexes(
				fechaTransaccion, 
				busquedaForm.getFechaTransaccion());
		indexes[5] = new Indexes(
				montoTransaccion, 
				busquedaForm.getMontoTransaccion());
		indexes[6] = new Indexes(
				fechaCreacionRegistro, 
				busquedaForm.getFechaCreacionRegistro());
		

		
		final BuscarDocumentosRequest buscarDocRequest = 
			new BuscarDocumentosRequest(
					dpUserDTO, 100, 
					docType, 
					indexes,
					busquedaForm.getIdFolder(),
					true,
					connectionDTO);
		
		try {
			buscarDocResponse = locator.getnovatecwsSOAP().buscarDocumentos(buscarDocRequest);			
			try {
				if(buscarDocResponse.getDocumenteInfo().length>0){
					for (int i = 0; i < buscarDocResponse.getDocumenteInfo().length; i++) {
						
						documentInfoDTO =  buscarDocResponse.getDocumenteInfo()[i];
						busquedaDTOs = new ArrayList<BusquedaDTO>();
						busquedaEdcDTO = BusquedaEdcDTO.getIntance();
						busquedaEdcDTO.setId(documentInfoDTO.getId());
						busquedaEdcDTO.setFolder(documentInfoDTO.getFolder());
						for (int j = 0; j < documentInfoDTO.getIndexes().length; 
								j++) {
							busquedaDTO = BusquedaDTO.getIntance();
							busquedaDTO.setName(
									documentInfoDTO.getIndexes()[j].getAlias());
								busquedaDTO.setValue(
										documentInfoDTO.
											getIndexes()[j].getValue());
							
							
							busquedaDTOs.add(busquedaDTO);
						}
						
						busquedaEdcDTO.setBusquedaDTOs(busquedaDTOs);
						busquedaEdcDTOs.add(busquedaEdcDTO);
					}
				}else{
					System.out.println("SE GENERO UN ERROR");
					final ActionErrors actionErrors = new ActionErrors();
					actionErrors.add("errors", new ActionMessage("home.sinResultados"));
					saveErrors(request, actionErrors);
					return mapping.findForward("failure");
				}
			} catch (Exception e) {
				System.out.println("SE GENERO UN ERROR");
				final ActionErrors actionErrors = new ActionErrors();
				actionErrors.add("errors", new ActionMessage("home.sinResultados"));
				saveErrors(request, actionErrors);
				e.printStackTrace();
				return mapping.findForward("failure");
			}
			
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			LOG_PANTALLA.error(e);
		} catch (ServiceException e) {
			// TODO Auto-generated catch block
			LOG_PANTALLA.error(e);
		}
		request.getSession().setAttribute("busqueda", busquedaEdcDTOs);
		request.setAttribute("busqueda", busquedaEdcDTOs);
		return mapping.findForward("success");
	}
}